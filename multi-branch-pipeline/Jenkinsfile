pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/vijay2181/jenkins-pr-merge-on-success'
        CONTEXT = 'ci/jenkins/build-status'
        GITHUB_API_URL = 'https://api.github.com/repos/vijay2181/jenkins-pr-merge-on-success'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    // Cancel previous builds if a new commit is pushed
                    cancelPreviousBuilds()

                    // Use Jenkins environment variables for the branch name
                    def branchName = env.BRANCH_NAME
                    echo "Checking out branch: ${branchName}"
                    
                    // Checkout the branch
                    git url: "${REPO_URL}", branch: branchName
                }
            }
        }

        stage('Build Steps') {
            steps {
                script {
                    // Add your testing scripts here
                    echo "Pull Request Number: ${env.CHANGE_ID}"
                    echo "Pull Request Target Branch: ${env.CHANGE_TARGET}"
                    echo "Pull Request Branch: ${env.BRANCH_NAME}"
                }
            }
        }

        stage('Sleep Stage') {
            steps {
                script {
                    // This stage is to check whether the previous build has failed if a new commit is pushed.
                    echo "Waiting for 30 seconds to check for new commits..."
                    sleep 30
                }
            }
        }
    }

    post {
        success {
            script {
                // Success actions, e.g., update GitHub status
                setBuildStatus("success", "Build and tests succeeded")
            }
        }
        failure {
            script {
                // Failure actions, e.g., update GitHub status
                setBuildStatus("failure", "Build or tests failed")
            }
        }
    }
}

def cancelPreviousBuilds() {
    // Check for other instances of this particular build, cancel any that are older than the current one
    def jobName = env.JOB_NAME
    def currentBuildNumber = env.BUILD_NUMBER.toInteger()
    def currentJob = Jenkins.instance.getItemByFullName(jobName)

    // Loop through all instances of this particular job/branch
    for (def build : currentJob.builds) {
        if (build.isBuilding() && (build.number.toInteger() < currentBuildNumber)) {
            echo "Older build still in progress. Sending kill signal to build number: ${build.number}"
            build.doStop()
        }
    }
}
