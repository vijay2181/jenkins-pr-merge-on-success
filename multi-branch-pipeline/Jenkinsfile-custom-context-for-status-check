pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/vijay2181/jenkins-pr-merge-on-success'
        CONTEXT = 'ci/jenkins/build-status'
        GITHUB_API_URL = 'https://api.github.com/repos/vijay2181/jenkins-pr-merge-on-success'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    // Use Jenkins environment variables for the branch name
                    def branchName = env.BRANCH_NAME
                    echo "Checking out branch: ${branchName}"
                    
                    // Checkout the branch
                    git url: "${REPO_URL}", branch: branchName
                }
            }
        }

        stage('Build Steps') {
            steps {
                script {
                    // Add your testing scripts here
                    echo "Pull Request Number: ${env.CHANGE_ID}"
                    echo "Pull Request Action: ${env.CHANGE_TARGET}"
                    echo "Pull Request Branch: ${env.BRANCH_NAME}"
                }
            }
        }
    }

    post {
        success {
            script {
                withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                    setBuildStatus("success", "Build and tests succeeded")
                }
            }
        }
        failure {
            script {
                withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                    setBuildStatus("failure", "Build or tests failed")
                }
            }
        }
    }
}

// Function to set the build status on GitHub
def setBuildStatus(String status, String description) {
    def repoUrl = env.REPO_URL
    def context = env.CONTEXT
    def apiUrl = env.GITHUB_API_URL
    def commitSha = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
    
    def payload = [
        state       : status,
        description : description,
        context     : context,
        target_url  : "${env.BUILD_URL}"
    ]

    def json = new groovy.json.JsonBuilder(payload).toString()
    def command = "curl -X POST -H 'Authorization: token ${GITHUB_TOKEN}' -H 'Content-Type: application/json' -d '${json}' ${apiUrl}/statuses/${commitSha}"

    sh command
}
